bits == 16
minheap 0xf000 
minstack 0xff
minreg 10
@define MALLOC_MAINP M0
@define WHITE_PICO8 7

._start
    cal .init_malloc
    cal .main
    hlt

.main
    imm r1 100
    imm r2 50
    cal .window_create_reimplement
    mov r8 r1
    imm r2 WHITE_PICO8
    cal .window_fill_reimplement
    imm r2 100
    imm r3 0
    imm r4 10
    imm r5 20
    cal .button_create
    imm r2 8
    cal .button_fill
    mov r1 r8
    cal .window_render_rereimplement
    ret

.windows [ 0 0 0 0 0 0 0 0 0 0 ] // max 10 windows

.window_render_rereimplement
    psh r1 //window
    psh r2
    psh r3
    llod r2 r1 1
    llod r3 r1 2
    lod r1 r1
    cal .render_sprite
    pop r3
    pop r2
    pop r1
    psh r1
    psh r2
    psh r3
    llod r2 r1 3 // buttons *
    
    .window_render_rereimplement__cycle
        lod r3 r2
        bre .window_render_rereimplement__end r3 0
       // hlt
        psh r1
        psh r2
        psh r3
        mov r3 r1
        mov r1 r2
        mov r2 r3
        cal .button_render
        inc r2 r2
        jmp .window_render_rereimplement__cycle
    .window_render_rereimplement__end
    pop r3
    pop r2
    pop r1
    pop r3
    pop r2
    pop r1
    ret

.button_render
    psh r1 // button*
    psh r2 // window*
    psh r3 // additional
    psh r4
    psh r5 // wx
    psh r6 // wy
    bre .button_render__end r1 0
    llod r5 r2 1
    llod r6 r2 2 // init of offsetted x & y
    lod r1 r1
    
    llod r3 r1 0 // x
    add r2 r3 r5
    llod r4 r1 1 // y
    add r3 r4 r6

    llod r1 r1 4 // graphics*, but we need to get x and y into R2 and R3 first
    cal .render_sprite
    .button_render__end
        pop r6
        pop r5
        pop r4
        pop r3
        pop r2
        pop r1
        ret

.button_fill
    psh r1 // button *
    psh r2 // color
    psh r3 // additional info
    psh r4
    psh r5
    lod r1 r1
    llod r1 r1 4 // graphics *
    lod r4 r1
    llod r5 r1 1
    mlt r4 r4 r5
    add r1 r1 2
    .button_fill__loop1
        str r1 r2
        dec r4 r4
        bre .button_fill__end r4 0
        inc r1 r1
        jmp .button_fill__loop1
    .button_fill__end
        pop r5
        pop r4
        pop r3
        pop r2
        pop r1
        ret

.index_of_0
    psh r1 // ptr
    psh r2 // additional
    psh r3 // additional
    imm r3 0
    .index_of_0__loop1
        llod r2 r1 r3
        brz .index_of_0_found r2
        inc r3 r3
        jmp .index_of_0__loop1
    .index_of_0_found
        mov r1 r3
        pop r3
        pop r2
        pop r9
        ret
.button_create
    psh r1 // window*
    psh r2 // x
    psh r3 // y
    psh r4 // h
    psh r5 // w
    psh r6
    //psh r1
    add r1 r1 3 // button ***
    lod r1 r1
    psh r1
    cal .index_of_0
    pop r6 // r1 - index for button to placed at, r2 - button **
    add r1 r1 r6 // pointer for button to placed at
    mov r6 r1
    imm r1 5
    cal .malloc
    str r1 r2
    lstr r1 1 r3
    lstr r1 2 r4
    lstr r1 3 r5
    mov r2 r1
    mlt r1 r4 r5
    add r1 r1 2
    cal .malloc
    str r1 r4
    lstr r1 1 r5
    lstr r2 4 r1
    str r6 r2
    mov r1 r6
    pop r6
    pop r5
    pop r4
    pop r3
    pop r2
    pop r9
    ret

.window_create_reimplement
    psh r1 // h
    psh r2 // w
    psh r3 // additional data
    mlt r3 r2 r1
    psh r1
    mov r1 r3
    add r1 r1 2
    cal .malloc
    mov r3 r1
    pop r1
    lstr r3 0 r1
    lstr r3 1 r2 // r1, r2 - useless, r3 - graphics*
    imm r1 4
    cal .malloc
    str r1 r3
    lstr r1 1 0
    lstr r1 2 0
    mov r2 r1
    imm r1 16 // buttons
    cal .malloc
    lstr r2 3 r1
    pop r3
    mov r1 r2
    pop r2
    pop r9
    ret

.window_fill_reimplement
    psh r1 // window*
    psh r2 // color
    psh r3 // additional reg
    psh r4 // additional reg
    lod r3 r1
    lod r4 r3
    llod r3 r3 1
    mlt r3 r3 r4 // total size
    lod r1 r1
    add r1 r1 2 
    .window_fill_reimplement__loop1
        str r1 r2
        dec r3 r3
        bre .window_create_reimplement__end r3 0
        inc r1 r1
        jmp .window_fill_reimplement__loop1
    .window_create_reimplement__end
        pop r4
        pop r3
        pop r2
        pop r1
        ret

.window_create
    psh r1 // h
    psh r2 // w
    psh r3 // additional calc
    mlt r3 r2 r1 // full size of window
    psh r3
    psh r2
    psh r1
    mov r1 r3
    add r1 r1 4
    cal .malloc
    str r1 0
    lstr r1 1 0
    add r1 r1 2
    mov r2 r1
    pop r1
    str r2 r1
    mov r3 r2
    pop r2
    lstr r3 1 r2
    mov r1 r3
    pop r3
    pop r3
    pop r2
    pop r9
    ret

.window_fill
    psh r1 // window*
    psh r2 // color (pico-8 format)
    psh r3 // additional data
    psh r4 // additional data
    lod r3 r1
    llod r4 r1 1
    mlt r3 r3 r4
    add r1 r1 2
    .window_fill__loop1
        str r1 r2
        dec r3 r3
        bre .window_fill__end r3 0
        inc r1 r1
        jmp .window_fill__loop1
    .window_fill__end
        pop r4
        pop r3
        pop r2
        pop r1
        ret

.window_render
    psh r1 // window *
    psh r2
    psh r3
    sub r1 r1 2
    lod r2 r1
    llod r3 r1 1
    add r1 r1 2
    cal .render_sprite
    pop r3
    pop r2
    pop r1
    ret

.window_render_reimplement
    psh r1 //window*
    psh r2
    psh r3
    llod r2 r1 1
    llod r3 r1 2
    lod r1 r1
    cal .render_sprite
    pop r3
    pop r2
    pop r1
    ret

.window_create_button
    

.sys_vars
    dw 0
    .mouse_x_y
    dw [0 0]
    .mouse_button_status
    dw 0

//.mouse_scan
//    psh r1
//    in r1 %MOUSE_X
//    lstr .mouse_x_y 0 r1
//    in r1 %MOUSE_Y
//    lstr .mouse_x_y 1 r1
//    in r1 %MOUSE_BUTTONS
//    str .mouse_button_status r1
//    pop r1
//    ret

.render_letter
    psh r1 //char
    psh r2 // x
    psh r3 // y
    sub r1 r1 32
    mlt r1 r1 27
    add r1 r1 .space1
    cal .render_sprite
    pop r3
    pop r2
    pop r1
    ret

.render_string
    psh r1 // str*
    psh r2 // x
    imm r2 0
    psh r3 // y
    imm r3 0
    .render_string__loop1
        psh r1
        lod r1 r1
        bre .render_string__end r1 0
        bre .render_string__newline r1 0xa0
        cal .render_letter
        pop r1
        inc r1 r1
        add r2 r2 6
        jmp .render_string__loop1
    .render_string__newline
        pop r1
        add r3 r3 6
        imm r2 0
        inc r1 r1
        jmp .render_string__loop1
    .render_string__end
        pop r1
        pop r3
        pop r2
        pop r1
        ret
.strlen
    psh r1 // str *
    psh r2 // additional reg
    psh r3
    imm r3 0
    .strlen__loop1
        lod r2 r1
        bre .strlen__end r2 0
        inc r3 r3
        inc r1 r1
        jmp .strlen__loop1
    .strlen__end
        mov r1 r3
        pop r3
        pop r2
        pop r9
        ret

.strcpy
    psh r1 // dest str*
    psh r2 // src str*
    psh r3 // additional reg
    .strcpy__loop1
        lod r3 r2
        bre .strcpy__end r3 0
        str r1 r3
        inc r2 r2
        inc r1 r1
        jmp .strcpy__loop1
    .strcpy__end
        pop r3
        pop r2
        pop r1
        ret

.test_str
    dw [ "char: %%%c" 0xa0 0 ]

.print_str
    // input data: r1 -> char*
    psh r1
    psh r2 // reserve reg
    imm r2 0
    .print_str__loop1
        lod r2 r1
        bre .print_str__endp r2 0
        out %text r2
        inc r1 r1
        jmp .print_str__loop1
    .print_str__endp
        pop r2
        pop r1
        ret

.printf // r1 = char*
    pop r9 // ret*
    str 0xee0 r1 
    str 0xee1 r2
    str 0xee2 r3
    imm r2 0
    .printf__loop1
        lod r2 r1
        bre .printf_str__endp r2 0
        bre .printf__perc r2 '%'
        out %text r2
        inc r1 r1
        jmp .printf__loop1
    .printf__perc
        inc r1 r1
        lod r2 r1
        bre .printf__percsub__d r2 'd'
        bre .printf__percsub__s r2 's'
        bre .printf__percsub__c r2 'c'
        bre .printf__percsub__perc r2 '%'
        jmp .printf__percsub__err
    .printf__percsub__perc
        out %text '%'
        inc r1 r1
        jmp .printf__loop1
    .printf__percsub__d
        pop r3
        out %numb r3
        inc r1 r1
        jmp .printf__loop1
    .printf__percsub__c
        pop r3
        out %text r3
        inc r1 r1
        jmp .printf__loop1
    .printf__percsub__s
        pop r3
        str 0xee3 r1
        mov r1 r3
        cal .print_str
        lod r1 0xee3
        inc r1 r1
        jmp .printf__loop1
    .printf__percsub__err
        imm r1 .printf__percsub__err_str
        psh r2
        cal .printf
    .printf_str__endp
        lod r3 0xee2
        lod r2 0xee1
        lod r1 0xee0
        jmp r9
    .printf__percsub__err_str
        dw [ "Wrong percentage-value %c" 0 ]
// only header gonna be 0bFaaa_aaaa_aaaa_aaaa, where 'F' is isfree bit and 'a' is address bit
.init_malloc
str MALLOC_MAINP 0xffff
ret

.malloc
    psh r1 // size
    psh r2 // dynamic malloc_start*
    imm r2 MALLOC_MAINP
    psh r3 // additional reg
    psh r4
    .malloc__loop1
        lod r3 r2
        brg .malloc__found__free r3 0x8000
        and r3 r3 0x7fff
        mov r2 r3
        jmp .malloc__loop1
    
    .malloc__found__free
        and r3 r3 0x7fff // getting address of next chunk (can work as size indicator)
        sub r4 r3 r2 // size of chunk available
        brl .malloc__found r1 r4
        // bre .malloc__found__partition__needed r1 r4
        bre .malloc__fail r3 0x7fff // check for failure
        bre .malloc__fail r3 0x0000
        mov r2 r3
        jmp .malloc__loop1
    .malloc__fail
        pop r4
        pop r3
        pop r2
        pop r1
        imm r1 0xffff // -1
        ret
    .malloc__found
        bne .malloc__found__skip r3 0x7fff // if ( address_of_the_next_chunk == 0x7fff) {
        // r1 - size, r2 - pointer to curr chunk, r3 - addr to next chunk, r4 - size of chunk
        psh r4
        mov r4 r1
        add r4 r4 r2
        and r4 r4 0x7fff
        add r4 r4 1
        str r2 r4
        str r4 0xffff
        pop r4
        jmp .malloc__end
        // }
        .malloc__found__skip 
        bre .malloc__found__skip2 r1 r4 // if ( chunk_size != req_size ) { -> fragmentation
        psh r4
        psh r3
        or r3 r3 0x8000 // making header from address
        mov r4 r1 // 
        add r4 r4 r2 // pointer to next header
        and r4 r4 0x7fff 
        add r4 r4 1 // making offset
        str r2 r4
        lod r5 r4
        bne .malloc__found__endstack r5 0xffff // if ( r4* == END_OF_MALLOC_STACK ) {
        str r4 0xffff
        jmp .malloc__found__endstack_2
        .malloc__found__endstack // } else {
        str r4 r3
        .malloc__found__endstack_2 // }
        pop r3
        pop r4
        jmp .malloc__end
        .malloc__found__skip2 // } else { -> simple address storing
        and r3 r3 0x8000
        str r2 r3
        .malloc__end
        pop r4
        pop r3
        mov r1 r2
        inc r1 r1
        pop r2
        pop r9
        ret

.free   
    psh r1 // pointer
    psh r2 // additional data
    psh r3
    psh r4
    lod r2 r1
    brg .free__alreadyfree r2 0x7fff
    sub r3 r2 r1 // size
    mov r4 r1
    .free__loop1
        str r4 0
        inc r4 r4
        dec r3 r3
        bre .free__freed r3 0
        jmp .free__loop1
.free__freed
    or r2 r2 0x8000
    str r1 r2
.free__alreadyfree
    cal .defragm_global
    pop r4
    pop r3
    pop r2
    pop r1
    ret
        

.defragm
    psh r1 // pointer
    psh r2
    lod r2 r1 // pointer to the next block
    psh r2 
    and r2 r2 0x7fff
    lod r2 r2
    brl .defragm_done2 r2 0x8000
    str r1 r2
    pop r2
    and r2 r2 0x7fff
    str r2 0
    jmp .defragm_done
.defragm_done2
    pop r2
.defragm_done
    pop r2
    pop r1
    ret


.defragm_global
    psh r1 // global malloc start ptr
    imm r1 MALLOC_MAINP
    psh r2 // additional data
    .defragm_global__loop1
        lod r2 r1
        bre .defragm_global__end r2 0xffff 
        brg .defragm_global__loopsub_found r2 0x8000
        
        and r2 r2 0x7fff
        mov r1 r2
        jmp .defragm_global__loop1
    .defragm_global__loopsub_found
        psh r1
        psh r2
        cal .defragm
        pop r2
        pop r1
        lod r2 r1
        and r2 r2 0x7fff
        bre .defragm_global__end r2 0x7fff
        mov r1 r2
        jmp .defragm_global__loop1 
.defragm_global__end
    pop r2
    pop r1
    ret
    
.memcpy
    psh r1 // dest *
    psh r2 // src *
    psh r3 // size
    psh r4 // additional
    .memcpy__loop1
        lod r4 r2
        str r1 r4
        dec r3 r3
        inc r1 r1
        inc r2 r2
        bre .memcpy__done r3 0
        jmp .memcpy__loop1
.memcpy__done
    pop r4
    pop r3
    pop r2
    pop r1
    ret

.render_sprite   
    //@debug
    psh r1 // pointer
    psh r2 // off_x
    psh r3 // off_y
    psh r4 // h
    lod r4 r1 // h = data[0]
    psh r5 // w
    llod r5 r1 1 // w = data[1]
    psh r6 // y
    imm r6 0
    psh r7 // x
    imm r7 0
    psh r8 // additional info
    add r1 r1 2 // ndata = data[2:]
    out %buffer 1
    .render_foryinrangeh
       .render_foryinrangeh_forxinrangew
           psh r7
           add r7 r7 r2
           out %x r7
           pop r7
           psh r6
           add r6 r6 r3
           out %y r6
           pop r6
           mlt r8 r6 r5
           add r8 r8 r7
           llod r8 r8 r1
           out %color r8
           inc r7 r7
           bne .render_foryinrangeh_forxinrangew r7 r5
       imm r7 0
       inc r6 r6
       bne .render_foryinrangeh r6 r4 
    out %buffer 2
    pop r8
    pop r7
    pop r6
    pop r5
    pop r4
    pop r3
    pop r2
    pop r1
    ret

.space1
    dw [5 5]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
.exclamationMark1
    dw [5 5]
    dw [0 7 0 0 0]
    dw [0 7 0 0 0]
    dw [0 7 0 0 0]
    dw [0 0 0 0 0]
    dw [0 7 0 0 0]
.quote1
    dw [5 5]
    dw [0 7 0 7 0]
    dw [0 7 0 7 0]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]

.hashtag
    dw [5 5]
    dw [0 7 0 7 0]
    dw [7 7 7 7 7]
    dw [0 7 0 7 0]
    dw [7 7 7 7 7]
    dw [0 7 0 7 0]
.dollarSign
    dw [5 5]
    dw [0 7 7 7 0]
    dw [7 0 7 0 0]
    dw [0 7 7 7 0]
    dw [0 0 7 0 7]
    dw [0 7 7 7 0]
.percentSign    
    dw [5 5]
    dw [0 7 0 7 0]
    dw [0 0 0 7 0]
    dw [0 0 7 0 0]
    dw [0 7 0 0 0]
    dw [0 7 0 7 0]
.andSign
    dw [5 5]
    dw [0 0 7 0 0]
    dw [0 7 0 7 0]
    dw [0 0 7 0 0]
    dw [0 7 0 7 0]
    dw [0 7 7 7 0]
.singlequotesign
    dw [5 5]
    dw [0 0 7 0 0]
    dw [0 0 7 0 0]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
.leftParenthesis
    dw [5 5]
    dw [0 0 7 0 0]
    dw [0 7 0 0 0]
    dw [0 7 0 0 0]
    dw [0 7 0 0 0]
    dw [0 0 7 0 0]
.rightParenthesis
    dw [5 5]
    dw [0 0 7 0 0]
    dw [0 0 0 7 0]
    dw [0 0 0 7 0]
    dw [0 0 0 7 0]
    dw [0 0 7 0 0]
.starSign
    dw [5 5]
    dw [0 0 0 0 0]
    dw [0 7 0 7 0]
    dw [0 0 7 0 0]
    dw [0 7 0 7 0]
    dw [0 0 0 0 0]
.plusSign
    dw [5 5]
    dw [0 0 0 0 0]
    dw [0 0 7 0 0]
    dw [0 7 7 7 0]
    dw [0 0 7 0 0]
    dw [0 0 0 0 0]
.commaSign
    dw [5 5]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
    dw [0 0 7 0 0]
    dw [0 7 0 0 0]
.dashSign
    dw [5 5]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
    dw [7 7 7 7 7]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
.dotSign
    dw [5 5]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
    dw [0 7 0 0 0]
.slashSign
    dw [5 5]
    dw [0 0 0 7 0]
    dw [0 0 0 7 0]
    dw [0 0 7 0 0]
    dw [0 7 0 0 0]
    dw [0 7 0 0 0]
.zeroNumb
    dw [5 5]
    dw [0 7 7 0 0]
    dw [7 0 0 7 0]
    dw [7 0 0 7 0]
    dw [7 0 0 7 0]
    dw [0 7 7 0 0]
.oneNumb
    dw [5 5]
    dw [0 0 7 0 0]
    dw [0 7 7 0 0]
    dw [0 0 7 0 0]
    dw [0 0 7 0 0]
    dw [0 7 7 7 0]
.twoNumb
    dw [5 5]
    dw [0 7 7 7 0]
    dw [0 0 0 0 7]
    dw [0 0 7 7 0]
    dw [0 7 0 0 0]
    dw [0 7 7 7 7]
.threeNumb
    dw [5 5]
    dw [0 7 7 7 0]
    dw [7 0 0 0 7]
    dw [0 0 7 7 0]
    dw [7 0 0 0 7]
    dw [0 7 7 7 0]
.fourNumb
    dw [5 5]
    dw [0 7 0 7 0]
    dw [0 7 0 7 0]
    dw [0 7 7 7 0]
    dw [0 0 0 7 0]
    dw [0 0 0 7 0]
.fiveNumb
    dw [5 5]
    dw [0 7 7 7 0]
    dw [0 7 0 0 0]
    dw [0 7 7 7 0]
    dw [0 0 0 7 0]
    dw [0 7 7 0 0]
.sixNumb
    dw [5 5]
    dw [0 7 7 7 0]
    dw [7 0 0 0 0]
    dw [7 7 7 7 0]
    dw [7 0 0 0 7]
    dw [0 7 7 7 0]
.sevenNumb
    dw [5 5]
    dw [0 7 7 7 0]
    dw [0 0 0 7 0]
    dw [0 0 0 7 0]
    dw [0 0 0 7 0]
    dw [0 0 0 7 0]
.eightNumb
    dw [5 5]
    dw [0 7 7 0 0]
    dw [7 0 0 7 0]
    dw [0 7 7 0 0]
    dw [7 0 0 7 0]
    dw [0 7 7 7 0]
.nineNumb
    dw [5 5]
    dw [0 7 7 0 0]
    dw [7 0 0 7 0]
    dw [0 7 7 7 0]
    dw [0 0 0 7 0]
    dw [0 7 7 0 0]
.doubledotsign
    dw [5 5]
    dw [0 0 0 0 0]
    dw [0 7 0 0 0]
    dw [0 0 0 0 0]
    dw [0 7 0 0 0]
    dw [0 0 0 0 0]
.semicolonsign
    dw [5 5]
    dw [0 7 0 0 0]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
    dw [0 7 0 0 0]
    dw [7 0 0 0 0]
.lesssign
    dw [5 5]
    dw [0 0 0 7 7]
    dw [0 7 7 0 0]
    dw [7 0 0 0 0]
    dw [0 7 7 0 0]
    dw [0 0 0 7 7]
.equalsing
    dw [5 5]
    dw [0 0 0 0 0]
    dw [7 7 7 7 7]
    dw [0 0 0 0 0]
    dw [7 7 7 7 7]
    dw [0 0 0 0 0]
.greatersign
    dw [5 5]
    dw [7 7 0 0 0]
    dw [0 0 7 7 0]
    dw [0 0 0 0 7]
    dw [0 0 7 7 0]
    dw [7 7 0 0 0]
.questionmark
    dw [5 5]
    dw [0 7 7 7 0]
    dw [7 0 0 0 7]
    dw [0 0 7 7 0]
    dw [0 0 0 0 0]
    dw [0 0 7 0 0]
.dogsign
    dw [5 5]
    dw [0 0 7 7 0]
    dw [7 7 0 0 7]
    dw [7 7 7 0 7]
    dw [7 0 0 0 7]
    dw [0 7 7 7 0]
.letterA_rend
    dw [5 5]
    dw [0 7 7 7 0]
    dw [7 0 0 0 7]
    dw [7 7 7 7 7]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]

.letterB_rend
    dw [5 5]
    dw [7 7 7 7 0]
    dw [7 0 0 0 7]
    dw [7 7 7 7 0]
    dw [7 0 0 0 7]
    dw [7 7 7 7 7]

.letterC_rend
    dw [5 5]
    dw [0 7 7 7 0]
    dw [7 0 0 0 7]
    dw [7 0 0 0 0]
    dw [7 0 0 0 7]
    dw [0 7 7 7 0]

.letterD_rend
    dw [5 5]
    dw [7 7 7 7 0]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
    dw [7 7 7 7 0]

.letterE_rend
    dw [5 5]
    dw [7 7 7 7 7]
    dw [7 0 0 0 0]
    dw [7 7 7 7 0]
    dw [7 0 0 0 0]
    dw [7 7 7 7 7]

.letterF_rend
    dw [5 5]
    dw [7 7 7 7 7]
    dw [7 0 0 0 0]
    dw [7 7 7 7 0]
    dw [7 0 0 0 0]
    dw [7 0 0 0 0]

.letterG_rend
    dw [5 5]
    dw [0 7 7 7 0]
    dw [7 0 0 0 0]
    dw [7 0 0 7 7]
    dw [7 0 0 0 7]
    dw [0 7 7 7 0]

.letterH_rend
    dw [5 5]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
    dw [7 7 7 7 7]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]

.letterI_rend
    dw [5 5]
    dw [0 7 7 7 0]
    dw [0 0 7 0 0]
    dw [0 0 7 0 0]
    dw [0 0 7 0 0]
    dw [0 7 7 7 0]
.letterJ_rend
    dw [5 5]
    dw [0 7 7 7 0]
    dw [0 0 7 0 0]
    dw [0 0 7 0 0]
    dw [7 0 7 0 0]
    dw [0 7 7 0 0]

.letterK_rend
    dw [5 5]
    dw [7 0 0 7 0]
    dw [7 0 7 0 0]
    dw [7 7 0 0 0]
    dw [7 0 7 0 0]
    dw [7 0 0 7 0]

.letterL_rend
    dw [5 5]
    dw [7 0 0 0 0]
    dw [7 0 0 0 0]
    dw [7 0 0 0 0]
    dw [7 0 0 0 0]
    dw [7 7 7 0 0]
.letterM_rend
    dw [5 5]
    dw [7 0 0 0 7]
    dw [7 7 0 7 7]
    dw [7 0 7 0 7]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
.letterN_rend
    dw [5 5]
    dw [7 0 0 0 7]
    dw [7 7 0 0 7]
    dw [7 0 7 0 7]
    dw [7 0 0 7 7]
    dw [7 0 0 0 7]
.letterO_rend
    dw [5 5]
    dw [0 7 7 7 0]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
    dw [0 7 7 7 0]
.letterP_rend
    dw [5 5]
    dw [7 7 7 0 0]
    dw [7 0 0 7 0]
    dw [7 7 7 0 0]
    dw [7 0 0 0 0]
    dw [7 0 0 0 0]
.letterQ_rend
    dw [5 5]
    dw [0 7 7 7 0]
    dw [7 0 0 0 7]
    dw [7 0 7 0 7]
    dw [7 0 0 7 0]
    dw [0 7 7 0 7]
.letterR_rend
    dw [5 5]
    dw [7 7 7 0 0]
    dw [7 0 0 7 0]
    dw [7 7 7 0 0]
    dw [7 0 0 7 0]
    dw [7 0 0 7 0]
.letterS_rend
    dw [5 5]
    dw [0 7 7 7 0]
    dw [7 0 0 0 0]
    dw [0 7 7 7 0]
    dw [0 0 0 0 7]
    dw [0 7 7 7 0]
.letterT_rend
    dw [5 5]
    dw [7 7 7 7 7]
    dw [0 0 7 0 0]
    dw [0 0 7 0 0]
    dw [0 0 7 0 0]
    dw [0 0 7 0 0]
.letterU_rend
    dw [5 5]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
    dw [0 7 7 7 7]
.letterV_rend
    dw [5 5]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
    dw [0 7 0 7 0]
    dw [0 7 0 7 0]
    dw [0 0 7 0 0]
.letterW_rend
    dw [5 5]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
    dw [7 0 7 0 7]
    dw [7 7 0 7 7]

.letterX_rend
    dw [5 5]
    dw [7 0 0 0 7]
    dw [0 7 0 7 0]
    dw [0 0 7 0 0]
    dw [0 7 0 7 0]
    dw [7 0 0 0 7]
.letterY_rend
    dw [5 5]
    dw [7 0 0 0 7]
    dw [0 7 0 7 0]
    dw [0 0 7 0 0]
    dw [0 0 7 0 0]
    dw [0 0 7 0 0]
.letterZ_rend
    dw [5 5]
    dw [7 7 7 7 7]
    dw [0 0 0 7 0]
    dw [0 0 7 0 0]
    dw [0 7 0 0 0]
    dw [7 7 7 7 7]
.leftsquareParethesisSign
    dw [5 5]
    dw [0 7 7 0 0]
    dw [0 7 0 0 0]
    dw [0 7 0 0 0]
    dw [0 7 0 0 0]
    dw [0 7 7 0 0]
.backSlashSign
    dw [5 5]
    dw [0 7 0 0 0]
    dw [0 7 0 0 0]
    dw [0 0 7 0 0]
    dw [0 0 0 7 0]
    dw [0 0 0 7 0]
.rightsquareParethesisSign
    dw [5 5]
    dw [0 0 7 7 0]
    dw [0 0 0 7 0]
    dw [0 0 0 7 0]
    dw [0 0 0 7 0]
    dw [0 0 7 7 0]
.upSign
    dw [5 5]
    dw [0 0 7 0 0]
    dw [0 7 0 7 0]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
.downDashSign
    dw [5 5]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
    dw [7 7 7 7 7]
.sidequotesign
    dw [5 5]
    dw [0 7 0 0 0]
    dw [0 0 7 0 0]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
.lletterA_rend
    dw [5 5]
    dw [0 7 7 7 0]
    dw [7 0 0 0 7]
    dw [7 7 7 7 7]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]

.lletterB_rend
    dw [5 5]
    dw [7 7 7 7 0]
    dw [7 0 0 0 7]
    dw [7 7 7 7 0]
    dw [7 0 0 0 7]
    dw [7 7 7 7 7]

.lletterC_rend
    dw [5 5]
    dw [0 7 7 7 0]
    dw [7 0 0 0 7]
    dw [7 0 0 0 0]
    dw [7 0 0 0 7]
    dw [0 7 7 7 0]

.lletterD_rend
    dw [5 5]
    dw [7 7 7 7 0]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
    dw [7 7 7 7 0]

.lletterE_rend
    dw [5 5]
    dw [7 7 7 7 7]
    dw [7 0 0 0 0]
    dw [7 7 7 7 0]
    dw [7 0 0 0 0]
    dw [7 7 7 7 7]

.lletterF_rend
    dw [5 5]
    dw [7 7 7 7 7]
    dw [7 0 0 0 0]
    dw [7 7 7 7 0]
    dw [7 0 0 0 0]
    dw [7 0 0 0 0]

.lletterG_rend
    dw [5 5]
    dw [0 7 7 7 0]
    dw [7 0 0 0 0]
    dw [7 0 0 7 7]
    dw [7 0 0 0 7]
    dw [0 7 7 7 0]

.lletterH_rend
    dw [5 5]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
    dw [7 7 7 7 7]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]

.lletterI_rend
    dw [5 5]
    dw [0 7 7 7 0]
    dw [0 0 7 0 0]
    dw [0 0 7 0 0]
    dw [0 0 7 0 0]
    dw [0 7 7 7 0]
.lletterJ_rend
    dw [5 5]
    dw [0 7 7 7 0]
    dw [0 0 7 0 0]
    dw [0 0 7 0 0]
    dw [7 0 7 0 0]
    dw [0 7 7 0 0]

.lletterK_rend
    dw [5 5]
    dw [7 0 0 7 0]
    dw [7 0 7 0 0]
    dw [7 7 0 0 0]
    dw [7 0 7 0 0]
    dw [7 0 0 7 0]

.lletterL_rend
    dw [5 5]
    dw [7 0 0 0 0]
    dw [7 0 0 0 0]
    dw [7 0 0 0 0]
    dw [7 0 0 0 0]
    dw [7 7 7 0 0]
.lletterM_rend
    dw [5 5]
    dw [7 0 0 0 7]
    dw [7 7 0 7 7]
    dw [7 0 7 0 7]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
.lletterN_rend
    dw [5 5]
    dw [7 0 0 0 7]
    dw [7 7 0 0 7]
    dw [7 0 7 0 7]
    dw [7 0 0 7 7]
    dw [7 0 0 0 7]
.lletterO_rend
    dw [5 5]
    dw [0 7 7 7 0]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
    dw [0 7 7 7 0]
.lletterP_rend
    dw [5 5]
    dw [7 7 7 0 0]
    dw [7 0 0 7 0]
    dw [7 7 7 0 0]
    dw [7 0 0 0 0]
    dw [7 0 0 0 0]
.lletterQ_rend
    dw [5 5]
    dw [0 7 7 7 0]
    dw [7 0 0 0 7]
    dw [7 0 7 0 7]
    dw [7 0 0 7 0]
    dw [0 7 7 0 7]
.lletterR_rend
    dw [5 5]
    dw [7 7 7 0 0]
    dw [7 0 0 7 0]
    dw [7 7 7 0 0]
    dw [7 0 0 7 0]
    dw [7 0 0 7 0]
.lletterS_rend
    dw [5 5]
    dw [0 7 7 7 0]
    dw [7 0 0 0 0]
    dw [0 7 7 7 0]
    dw [0 0 0 0 7]
    dw [0 7 7 7 0]
.lletterT_rend
    dw [5 5]
    dw [7 7 7 7 7]
    dw [0 0 7 0 0]
    dw [0 0 7 0 0]
    dw [0 0 7 0 0]
    dw [0 0 7 0 0]
.lletterU_rend
    dw [5 5]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
    dw [0 7 7 7 7]
.lletterV_rend
    dw [5 5]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
    dw [0 7 0 7 0]
    dw [0 7 0 7 0]
    dw [0 0 7 0 0]
.lletterW_rend
    dw [5 5]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
    dw [7 0 0 0 7]
    dw [7 0 7 0 7]
    dw [7 7 0 7 7]

.lletterX_rend
    dw [5 5]
    dw [7 0 0 0 7]
    dw [0 7 0 7 0]
    dw [0 0 7 0 0]
    dw [0 7 0 7 0]
    dw [7 0 0 0 7]
.lletterY_rend
    dw [5 5]
    dw [7 0 0 0 7]
    dw [0 7 0 7 0]
    dw [0 0 7 0 0]
    dw [0 0 7 0 0]
    dw [0 0 7 0 0]
.lletterZ_rend
    dw [5 5]
    dw [7 7 7 7 7]
    dw [0 0 0 7 0]
    dw [0 0 7 0 0]
    dw [0 7 0 0 0]
    dw [7 7 7 7 7]
.figurerightParenthesisSign
    dw [5 5]
    dw [0 0 7 7 0]
    dw [0 0 7 0 0]
    dw [0 7 0 0 0]
    dw [0 0 7 0 0]
    dw [0 0 7 7 0]
.straightLineSign
    dw [5 5]
    dw [0 0 7 0 0]
    dw [0 0 7 0 0]
    dw [0 0 7 0 0]
    dw [0 0 7 0 0]
    dw [0 0 7 0 0]
.figureleftParenthesisSign
    dw [5 5]
    dw [0 7 7 0 0]
    dw [0 0 7 0 0]
    dw [0 0 0 7 0]
    dw [0 0 7 0 0]
    dw [0 7 7 0 0]
.tildaSign
    dw [5 5]
    dw [0 7 0 0 0]
    dw [7 0 7 0 7]
    dw [0 0 0 7 0]
    dw [0 0 0 0 0]
    dw [0 0 0 0 0]
.deleteSign
    dw [5 5]
    dw [7 7 0 7 0]
    dw [7 0 7 7 0]
    dw [7 7 0 7 0]
    dw [0 0 0 7 0]
    dw [0 0 0 7 7]